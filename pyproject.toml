[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "audio-engine"
version = "1.0.0"
description = "Professional therapeutic noise generator for YouTube content creation"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Audio Engine Team", email = "contact@audioengine.com"}
]
keywords = [
    "audio", "noise", "therapeutic", "white-noise", "pink-noise", "brown-noise",
    "youtube", "lufs", "infant", "sleep", "relaxation", "cuda", "gpu"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Sound/Audio :: Generators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent"
]
dependencies = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "soundfile>=0.12.1",
    "librosa>=0.10.0",
    "mutagen>=1.46.0",
    "psutil>=5.9.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0"
]
performance = [
    "numba>=0.56.0"
]
colab = [
    "ipywidgets"
]

[project.urls]
Homepage = "https://github.com/your-repo/AudioEngine"
Repository = "https://github.com/your-repo/AudioEngine"
Issues = "https://github.com/your-repo/AudioEngine/issues"
Documentation = "https://github.com/your-repo/AudioEngine/wiki"

[project.scripts]
audio-engine = "audio_engine.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["audio_engine*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["audio_engine"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=audio_engine --cov-report=html --cov-report=term-missing"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["audio_engine"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]